3a4
> #include <linux/platform_device.h>
54c55
< static struct hcsr_dev{
---
> struct hcsr_dev{
55a57
> 	struct platform_device platform_dev;
68c70,71
< }*hcsr_devp[2];
---
> } *hcsr_any_devp;
> 
90a94,97
> /*
> *Free resources
> */
> 
115,121c122,123
< 
< void system_abort(void){
< 	int i=0;
< 	struct hcsr_dev* devp;
< 	for(i=0; i<2; i++){
< 		devp = hcsr_devp[i];
< 		up(&(devp->buffer_signal));	// if read is waiting then signal it.
---
> inline void platform_system_abort(struct hcsr_dev* devp){
> 		up(&(devp->buffer_signal));						// signal pending reads
123,124c125
< 
< 	}
---
> 		kfree(devp->misc_dev.name);
126a128,131
> /**********************************************************************/
> 
> inline int max(int num1, intnum2){ if(num1>num2) return num1; else return num2; }
> 
160a166
> 	struct hcsr_dev* hcsr_devp;
164,166c170,174
< 	
< 	list_for_each_entry(c, &hcsr_devp[0]->misc_dev.list, list) {
< 		printk(KERN_ALERT"%s: for loop \t %s\n",__FUNCTION__, c->name);
---
> 
> 	hcsr_devp = hcsr_any_devp;
> 
> 	//find minor number using the list
> 	list_for_each_entry(c, &hcsr_devp->misc_dev.list, list) { 
172,173c180
< 				file->private_data = hcsr_devp[0];
< 
---
> 				file->private_data = container_of(c, struct hcsr_dev, misc_dev);  //hcsr_devp[0];
178c185
< 				file->private_data = hcsr_devp[1];
---
> 				file->private_data = container_of(c, struct hcsr_dev, misc_dev);  //hcsr_devp[0];
261d267
< 		
267c273
< 					system_abort();
---
> 					platform_system_abort(hcsr_devp);
376c382
< 			 printk("mode : %d , frequency : %d \n",hcsr_devp->dev_mode_pair.mode, hcsr_devp->dev_mode_pair.frequency);
---
> 			// printk("mode : %d , frequency : %d \n",hcsr_devp->dev_mode_pair.mode, hcsr_devp->dev_mode_pair.frequency);
425a432
> 
436,449c443,448
< /* Misc structure */
< static struct miscdevice hcsr_dev1 = {
<  .minor = MISC_DYNAMIC_MINOR, 
<  .name = DEVICE_1,      
<  .fops = &hcsr_fops  
< };
< 
< static struct miscdevice hcsr_dev2 = {
<  .minor = MISC_DYNAMIC_MINOR, 
<  .name = DEVICE_2,      
<  .fops = &hcsr_fops  
< };
< 
< static int __init hcsr_driver_init(void){
---
> /*
> *Platform function implementations
> **/
> static int platform_hcsr_probe(struct platform_device* pdev){
> 	static int i; 			// static i is always initialized to 0 hence no initialization
> 	char* misc_dev_name;
450a450
> 	struct hcsr_dev* hcsr_devp;
452,466c452,455
< 	hcsr_devp[0] = kzalloc(sizeof(struct hcsr_dev), GFP_KERNEL);
< 	if(!hcsr_devp[0]){
< 		printk("%s: Kmalloc 1 failed\n",__FUNCTION__);
< 		return -1;
< 	}
< 
< 	hcsr_devp[1] = kzalloc(sizeof(struct hcsr_dev), GFP_KERNEL);
< 	if(!hcsr_devp[1]){
< 		printk("%s: Kmalloc 2 failed\n",__FUNCTION__);
< 		return -1;
< 	}
< 
< 	hcsr_devp[0]->head = 0;
< 	hcsr_devp[0]->tail = 0;
< 	hcsr_devp[0]->size = 0;
---
> 	hcsr_devp = platform_get_drvdata(pdev);  // container_of(pdev, struct hcsr_dev, platform_dev);
> 	i = pdev->id;
> 	if(i>9)
> 		return -ENOMEM;
468,473c457,467
< 	hcsr_devp[1]->head = 0;
< 	hcsr_devp[1]->tail = 0;
< 	hcsr_devp[1]->size = 0;
< 
< 	hcsr_devp[0]->dev_gpio_pair.echo = -1;
< 	hcsr_devp[0]->dev_gpio_pair.trigger = -1;
---
> 	/*TO DO: Free this appropriately*/
> 	misc_dev_name = kmalloc(sizeof(char) * (strlen("HCSR_") + 2) , GFP_KERNEL);   // supports from HCSR_0 to HCSR_9
> 	
> 	hcsr_devp->misc_dev.minor = MISC_DYNAMIC_MINOR;
> 	sprintf(misc_dev_name, "HCSR_%d", i);
> 	hcsr_devp->misc_dev.name = misc_dev_name;
> 	hcsr_devp->misc_dev.fops = &hcsr_fops;
> 	
> 	hcsr_devp->head = 0;
> 	hcsr_devp->tail = 0;
> 	hcsr_devp->size = 0;
475,476c469,470
< 	hcsr_devp[1]->dev_gpio_pair.echo = -1;
< 	hcsr_devp[1]->dev_gpio_pair.trigger = -1;
---
> 	hcsr_devp->dev_gpio_pair.echo = -1;
> 	hcsr_devp->dev_gpio_pair.trigger = -1;
478,479c472
< 	hcsr_devp[0]->dev_mode_pair.frequency = 16;
< 	hcsr_devp[1]->dev_mode_pair.frequency = 16;
---
> 	hcsr_devp->dev_mode_pair.frequency = 16;
481,482c474
< 	hcsr_devp[0]->trigger_task_struct = NULL;
< 	hcsr_devp[1]->trigger_task_struct = NULL;
---
> 	hcsr_devp->trigger_task_struct = NULL;
484,485c476
< 	sema_init(&(hcsr_devp[0]->buffer_signal),0);
< 	sema_init(&(hcsr_devp[1]->buffer_signal),0);
---
> 	sema_init(&(hcsr_devp->buffer_signal),0);
487,493c478,479
< 	ret = misc_register(&hcsr_dev1);
< 	if (ret){
< 		printk(KERN_ERR"Unable to register misc device 1\n");
< 		kfree(hcsr_devp[0]);
< 		kfree(hcsr_devp[1]);
< 		return ret;
< 	}
---
> 	if(i == 0)
> 		hcsr_any_devp = hcsr_devp;
495,500c481,485
< 	ret = misc_register(&hcsr_dev2);
< 	if (ret){
< 		printk(KERN_ERR"Unable to register misc device 2\n");
< 		kfree(hcsr_devp[0]);
< 		kfree(hcsr_devp[1]);
< 		return ret;
---
> 	ret = misc_register(&(hcsr_devp->misc_dev));
> 	if(ret < 0){
> 		printk("%d %s: misc dev register failed\n",__LINE__, __FUNCTION__);
> 		kfree(hcsr_devp->misc_dev.name);
> 		return -ECANCELED;
502,508c487,488
< 
< 	/*TO DO @Gautam dont do this, it is inefficient and does a mem copy. --@PSK*/
< 	hcsr_devp[0]->misc_dev = hcsr_dev1;
< 	/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
< 	hcsr_devp[1]->misc_dev = hcsr_dev2;
< 
< 	return 0; 
---
> 	i++;
> 	return 0;
511,514c491,496
< /* Driver Exit */
< void __exit hcsr_driver_exit(void){
< 
< 	system_abort();
---
> static int platform_hcsr_remove(struct platform_device *pdev){
> 	struct hcsr_dev* hcsr_devp = platform_get_drvdata(pdev);  // container_of(pdev, struct hcsr_dev, platform_dev);
> 	platform_system_abort(hcsr_devp);
> 	misc_deregister(&(hcsr_devp->misc_dev));
> 	return 0;
> }
516,519c498,505
< 	misc_deregister(&hcsr_dev1);
< 	misc_deregister(&hcsr_dev2);
< 	kfree(hcsr_devp[0]);
< 	kfree(hcsr_devp[1]);
---
> static struct platform_driver platform_HCSR04 = {
> 	.probe = platform_hcsr_probe,
> 	.remove = platform_hcsr_remove,
> 	.driver = {
> 		.name = "platform_HCSR04",
> 		.owner = THIS_MODULE,
> 	},
> };
521c507,509
< 	printk("hcsr driver removed.\n");
---
> static int __init platform_hcsr_driver_init(void){
> 	platform_driver_register(&platform_HCSR04);
> 	return 0;
524,525c512,519
< module_init(hcsr_driver_init);
< module_exit(hcsr_driver_exit);
---
> /* Driver Exit */
> void __exit platform_hcsr_driver_exit(void){
> 	platform_driver_unregister(&platform_HCSR04);
> 	printk("hcsr platform driver removed.\n");
> }
> // module_platform_driver(platform_HCSR04);
> module_init(platform_hcsr_driver_init);
> module_exit(platform_hcsr_driver_exit);
